    -- Charles-Spencer Coleman
    -- 29 April 2019
    -- The University of Sheffield
    
    -- This is the Epuck principal control script. It is threaded
    threadFunction=function()
        rnd=math.random(2)--Generates 1 of 2 numbers randomly to randomize the search direction of the robot
        while sim.getSimulationState()~=sim.simulation_advancing_abouttostop do
            if(rnd==1)then --A random number of 1 indicates an anticlockwise search direction
                velLeft=6.24
                velRight=4.5   
            else-- A random number of 2 indicates a clockwise search direction
                velLeft=4.01
                velRight=6.24
            end
            -- Image Processing Part.
            sim.handleVisionSensor(ePuckCam) -- the image processing camera is handled explicitely, since we do not need to execute that command at each simulation pass
            result,t0,t1=sim.readVisionSensor(ePuckCam) -- Here we read the image processing camera!
            -- The e-puck robot has Blob Detection filter. The code provided below get useful information
            -- regarding blobs detected, such as amount, size, position, etc.
            leftlimit=0.4
            rightlimit=0.6

            if (t1) then -- (if Detection is successful) in t1 we should have the blob information if the camera was set-up correctly  
                blobCount=t1[1]
                dataSizePerBlob=t1[2]
                lowestYofDetection=100
                dispx={}
                dispy={}
                size={}
                sizecomp=-1
                -- Now we go through all blobs:
                for i=1,blobCount,1 do
                    blobSize=t1[2+(i-1)*dataSizePerBlob+1]
                    blobOrientation=t1[2+(i-1)*dataSizePerBlob+2]
                    blobPos={t1[2+(i-1)*dataSizePerBlob+3],t1[2+(i-1)*dataSizePerBlob+4]}
                    blobBoxDimensions={t1[2+(i-1)*dataSizePerBlob+5],t1[2+(i-1)*dataSizePerBlob+6]}
                    -- now do something with the blob information
                    dispx[i]=blobPos[1]
                    dispy[i]=blobPos[2]
                    size[i]=blobSize
                    --If there is more than one blob it compares the sizes of the 
                    --blobs and stores biggest blob'sindex to be used for navigation
                    if (blobCount>1) then
                        if(size[i]>=sizecomp)then 
                            ind=i
                        else
                            ind=ind
                        end
                        sizecomp=size[i]
                    else
                        ind=i
                    end    
                    -- uses the blob position to navigate the robot to the blob
                    if(dispx[ind]>leftlimit and dispx[ind]<rightlimit) then --wheel speeds for resources straight ahead
                        velLeft=6.24
                        velRight=6.24
                    else if(dispx[ind]<leftlimit) then --wheel speedsreasource on the left
                        velLeft=4.1
                        velRight=6.24
                    else if (dispx[ind]>leftlimit)then --wheel speedsresource on the right
                        velLeft=6.24
                        velRight=4.15
                    end
                    end    
                    end
                end
           end
    
            --sim.addStatusbarMessage(blobCount) -- TO CHECK HOW MANY OBJECT (BLOB) DETECTED
            tim=sim.getSimulationTime()--get the simulation time
            
            -- This part of code gets the proximity sensor readings. 
            s=sim.getObjectSizeFactor(bodyElements) -- make sure that if we scale the robot during simulation, other values are scaled too!
            noDetectionDistance=0.05*s
            proxSensDist={noDetectionDistance,noDetectionDistance,noDetectionDistance,noDetectionDistance,noDetectionDistance,noDetectionDistance,noDetectionDistance,noDetectionDistance}
    
            for i=1,8,1 do
                res,dist=sim.readProximitySensor(proxSens[i])
                if (res>0) and (dist<noDetectionDistance) then
                    proxSensDist[i]=dist     
                end
            end

            if(proxSensDist[3]<noDetectionDistance and proxSensDist[4]<noDetectionDistance) then --collision avoidance 
                if(rnd==1)then -- For head on collision avoidance in the search direction
                velLeft=6.24
                velRight=-6.24   
                else
                velLeft=-6.24
                velRight=6.24
                end
                    
            else if(proxSensDist[2]<noDetectionDistance or proxSensDist[3]<noDetectionDistance)then --Leftward on collision avoidance
                velLeft=6
                velRight=-6
            else if(proxSensDist[4]<noDetectionDistance or proxSensDist[5]<noDetectionDistance)then --Rightward on collision avoidance
                velLeft=-6
                velRight=6
            end
            end
            end
            -- This part of the code sends the velocity values to the motors.
            -- An example were given below.
            maxVel = 6.24 -- Maximum wheel speeds in rad/s.
            sim.setJointTargetVelocity(leftMotor,velLeft)
            sim.setJointTargetVelocity(rightMotor,velRight)
            sim.switchThread() -- Don't waste too much time in here (simulation time will anyway only change in next thread switch)
    
            if  sim.getSimulationTime()==60 then --stops the simulation after 60 seconds
                 sim.stopSimulation()
            end
        end
                
        end
    
    -- These are handles, you do not need to change here. (If you need e.g. bluetooth, you can add it here)
    
    sim.setThreadSwitchTiming(200) -- We will manually switch in the main loop
    bodyElements=sim.getObjectHandle('ePuck_bodyElements')
    leftMotor=sim.getObjectHandle('ePuck_leftJoint')
    rightMotor=sim.getObjectHandle('ePuck_rightJoint')
    ePuck=sim.getObjectHandle('ePuck')
    ePuckCam=sim.getObjectHandle('ePuck_camera')
    ePuckBase=sim.getObjectHandle('ePuck_base')
    ledLight=sim.getObjectHandle('ePuck_ledLight')
    proxSens={-1,-1,-1,-1,-1,-1,-1,-1}
    for i=1,8,1 do
        proxSens[i]=sim.getObjectHandle('ePuck_proxSensor'..i)
    end
    
    res,err=xpcall(threadFunction,function(err) return debug.traceback(err) end)
    if not res then
        sim.addStatusbarMessage('Lua runtime error: '..err)
    end
